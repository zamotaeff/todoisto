version: '3.9'

services:
  frontend:
    image: sermalenk/skypro-front:lesson-36
    restart: always
    depends_on:
      - api
    ports:
      - "80:80"
  api:
    image: zamotaeff/todoisto:$GITHUB_REF_NAME-$GITHUB_RUN_ID
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_NAME: ${POSTGRES_NAME}
      POSTGRES_PORT: ${POSTGRES_PORT}
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: ${DEBUG}
      SOCIAL_AUTH_VK_OAUTH2_KEY: ${SOCIAL_AUTH_VK_OAUTH2_KEY}
      SOCIAL_AUTH_VK_OAUTH2_SECRET: ${SOCIAL_AUTH_VK_OAUTH2_SECRET}
    depends_on:
      db:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    ports:
      - "8000:8000"
  migrations:
    image: zamotaeff/todoisto:$GITHUB_REF_NAME-$GITHUB_RUN_ID
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_NAME: ${POSTGRES_NAME}
      POSTGRES_PORT: ${POSTGRES_PORT}
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: ${DEBUG}
      SOCIAL_AUTH_VK_OAUTH2_KEY: ${SOCIAL_AUTH_VK_OAUTH2_KEY}
      SOCIAL_AUTH_VK_OAUTH2_SECRET: ${SOCIAL_AUTH_VK_OAUTH2_SECRET}
    depends_on:
      db:
        condition: service_healthy
    command: sh -c "python3 manage.py migrate"
  db:
    image: postgres:12.4-alpine
    volumes:
      - ./postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_NAME: ${POSTGRES_NAME}
      POSTGRES_PORT: ${POSTGRES_PORT}
    restart: always
    ports:
    - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
