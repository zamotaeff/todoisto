version: '3.9'

services:
  frontend:
    image: sermalenk/skypro-front:lesson-38
    restart: always
    depends_on:
      - api
    ports:
      - "80:80"
#    volumes:
#      - ./deploy/nginx.conf:/etc/nginx/conf.d/default.conf
    networks:
      - backend_nw

  postgres:
    image: postgres:13.0-alpine
    restart: always
    env_file:
      - .env_example
    volumes:
      - pg_data_todolist:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d todoisto" ]
      interval: 5s
      timeout: 3s
      retries: 3
    ports:
      - "5432:5432"
    networks:
      - backend_nw

  api:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env_example
    environment:
      POSTGRES_HOST: postgres
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      - backend_nw

  bot:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env_example
    environment:
      POSTGRES_HOST: postgres
    depends_on:
      postgres:
        condition: service_healthy
    command: python ./backend/manage.py runbot
    networks:
      - backend_nw

volumes:
  pg_data_todolist:

networks:
  backend_nw:
    driver: bridge
